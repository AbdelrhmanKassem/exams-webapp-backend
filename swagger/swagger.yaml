---
openapi: 3.0.1
info:
  title: Exams API
  version: v1
paths:
  "/branches":
    get:
      summary: Get Branches
      security:
      - Bearer: []
      tags:
      - Branch
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200 ':
          description: Return page of branches
        '401':
          description: Failed (No or invalid auth header)
  "/districts":
    get:
      summary: Get Districts
      security:
      - Bearer: []
      tags:
      - District
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200 ':
          description: Return page of districts
        '401':
          description: Failed (No or invalid auth header)
  "/roles":
    get:
      summary: Get Roles
      security:
      - Bearer: []
      tags:
      - Role
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200 ':
          description: Return page of roles
        '401':
          description: Failed (No auth header or not an admin)
  "/schools":
    post:
      summary: Create School
      security:
      - Bearer: []
      tags:
      - School
      parameters: []
      responses:
        '201 ':
          description: Success
        '422':
          description: Failed (invalid school data)
        '401':
          description: Failed (No auth header or not an admin)
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_school_request"
    get:
      summary: Get Schools
      security:
      - Bearer: []
      tags:
      - School
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200 ':
          description: Return page of schools
        '401':
          description: Failed (No auth header or not an admin)
  "/students":
    post:
      summary: Create Student
      security:
      - Bearer: []
      tags:
      - Student
      parameters: []
      responses:
        '201 ':
          description: Success
        '422':
          description: Failed (invalid student data)
        '401':
          description: Failed (No auth header or not an admin)
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_student_request"
  "/users/login":
    post:
      summary: Login User
      tags:
      - User
      parameters: []
      responses:
        '200':
          description: Success
        '401':
          description: Failed (Incorrect Credentials)
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user_login_request"
  "/users/logout":
    delete:
      summary: Logout user
      security:
      - Bearer: []
      tags:
      - User
      responses:
        '200':
          description: Success
        '401':
          description: Failed (Already logged out / invalid token)
  "/users":
    post:
      summary: Create User
      security:
      - Bearer: []
      tags:
      - User
      parameters: []
      responses:
        '201 ':
          description: Success
        '422':
          description: Failed (invalid user data)
        '401':
          description: Failed (No auth header or not an admin)
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_user_request"
  "/users/accept_invite":
    post:
      summary: Accept user invitation
      tags:
      - User
      parameters: []
      responses:
        '200 ':
          description: Success
        '422':
          description: Failed (Invalid password, unmatching passwords, invalid token)
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/accept_invitation_request"
components:
  contentType: application/vnd.api+json
  securitySchemes:
    Bearer:
      description: JWT key necessary to use API calls
      type: apiKey
      name: Authorization
      in: header
  schemas:
    user_login_request:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
          required:
          - email
          - password
      required:
      - user
    create_user_request:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            role_id:
              type: integer
          required:
          - email
          - first_name
          - last_name
          - role_id
      required:
      - user
    accept_invitation_request:
      type: object
      properties:
        user:
          type: object
          properties:
            password:
              type: string
            password_confirmation:
              type: string
            invitation_token:
              type: string
          required:
          - password
          - password_confirmation
          - invitation_token
      required:
      - user
    create_school_request:
      type: object
      properties:
        school:
          type: object
          properties:
            name:
              type: string
            district_id:
              type: integer
          required:
          - name
          - district_id
      required:
      - school
    create_student_request:
      type: object
      properties:
        student:
          type: object
          properties:
            full_name:
              type: string
            email:
              type: string
            seat_number:
              type: integer
            branch_id:
              type: integer
            school_id:
              type: integer
          required:
          - full_name
          - email
          - seat_number
          - branch_id
          - school_id
      required:
      - student
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
